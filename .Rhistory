p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=factor(Natural.Amenity.Rank), alpha=0.25, geom=c("point", "smooth"))
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures/nin January and July: Seeking Trends",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
library(ggplot2)
setwd("~/Documents/__INFO-201/12code/nas")
source("./source/data_wrangling.R")
df <- create_natural_amenity_scale_df()
head(df)
p <- qplot(data=df, x=Natural.Amenity.Rank)
print(p)
num <- nrow(df)
t <- paste0("Distribution of Natural Amenity Scale Rankings (N=",num,").")
p <- p + labs(title=t,
x = "Rank (1-low, 7-high)",
y = "Frequency")
print(p)
p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=Natural.Amenity.Rank)
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures in January and July",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=factor(Natural.Amenity.Rank), alpha=0.25, geom=c("point", "smooth"))
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures \nin January and July: Seeking Trends",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
library(ggplot2)
setwd("~/Documents/__INFO-201/12code/nas")
source("./source/data_wrangling.R")
df <- create_natural_amenity_scale_df()
head(df)
p <- qplot(data=df, x=Natural.Amenity.Rank)
print(p)
num <- nrow(df)
t <- paste0("Distribution of Natural Amenity Scale Rankings (N=",num,").")
p <- p + labs(title=t,
x = "Rank (1-low, 7-high)",
y = "Frequency")
print(p)
p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=Natural.Amenity.Rank)
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures in January and July",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=factor(Natural.Amenity.Rank), alpha=0.25, geom=c("point", "smooth"))
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures \nin January and July: Seeking Trends",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
library(ggplot2)
setwd("~/Documents/__INFO-201/12code/nas")
source("./source/data_wrangling.R")
df <- create_natural_amenity_scale_df()
head(df)
p <- qplot(data=df, x=Natural.Amenity.Rank)
print(p)
num <- nrow(df)
t <- paste0("Distribution of Natural Amenity Scale Rankings (N=",num,").")
p <- p + labs(title=t,
x = "Rank (1-low, 7-high)",
y = "Frequency")
print(p)
p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=Natural.Amenity.Rank)
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures in January and July",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=factor(Natural.Amenity.Rank), alpha=0.25, geom=c("point", "smooth"))
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures \nin January and July: Seeking Trends",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
library(ggplot2)
setwd("~/Documents/__INFO-201/12code/nas")
source("./source/data_wrangling.R")
df <- create_natural_amenity_scale_df()
head(df)
p <- qplot(data=df, x=Natural.Amenity.Rank)
print(p)
num <- nrow(df)
t <- paste0("Distribution of Natural Amenity Scale Rankings (N=",num,").")
p <- p + labs(title=t,
x = "Rank (1-low, 7-high)",
y = "Frequency")
print(p)
p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=Natural.Amenity.Rank)
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures in January and July",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
p <- qplot(data=df, x=Mean.Temp.Jan, y=Mean.Temp.July, color=factor(Natural.Amenity.Rank), alpha=0.25, geom=c("point", "smooth"))
p <- p + labs(title="Natural Amenity Scale: Relationship between Mean Temperatures \nin January and July: Seeking Trends",
x = "Mean Temperature in January (Farienheit)",
y = "Mean Temperature in July (Farienheit)")
print(p)
library(ggplot2)
# Set the working directory
setwd("~/Documents/__INFO-201/12code/nas")
# Source these R files (note directory location)
source("./source/data_wrangling.R")
source("./source/viz.R")
# Create two data frame, to be used below in the report
na_df          <- create_natural_amenity_scale_df()
wa_map_info_df <- get_map_data_for_county("WA")
head(na_df)
wa_map_info_df <- get_map_data_for_county("WA")
head(wa_map_info_df,22)
na_df <- create_df_for_NAS_map(c("WA"))       # These two functions will be examined later
p <- draw_county_map("WA","adams",na_df)
print(p)
p <- draw_county_map("WA","King",na_df,show_nums=TRUE)
print(p)
df <- create_state_name_code_df()
head(df,5)
head(na_df,5)
na_df <- create_df_for_NAS_map(c("WA"))
p <- create_viz_with_continuous_scale(na_df)
print(p)
na_df <- create_df_for_NAS_map(c("Washington", "Oregon", "California"))
color_list <- get_7green_colors();
p <- create_viz_with_discrete_scale(na_df,color_list)
print(p)
na_df <- create_df_for_NAS_map(c("."))
p <- create_viz_with_continuous_scale(na_df)
print(p)
# NOTES ON Natural Amenities Scale and Data Set
#
# Natural Amenities Scale
#
# The Climatic data is from the Area Resource File (ARF). The ARF file is maintained by
# Quality Resource Systems (QRS) under contract to the Office of Research and Planning, Bureau of
# Health Professions, within the Health Resources and Services Administration.  For more information
# see http://www.arfsys.com .
#
# The topography scale is from The National Atlas of the United States of America
# U.S. Department of Interior, U.S. Geological Survey, Washington, DC., 1970.
#
# Land Surface Form Topography codes:
#
# Plains
# 1 = Flat plains
# 2 = Smooth plains
# 3 = Irregular plains, slight relief
# 4 = Irregular plains
#
# Tablelands
# 5 = Tablelands, moderate relief
# 6 = Tablelands, considerable relief
# 7 = Tablelands, high relief
# 8 = Tablelands, very high relief
#
# Plains with Hills or Mountains
# 9 = Plains with hills
# 10 = Plains with high hills
# 11 = Plains with low mountains
# 12 = Plains with high mountains
#
# Open Hills and Mountains
# 13 = Open low hills
# 14 = Open hills
# 15 = Open high hills
# 16 = Open low mountains
# 17 = Open high mountains
#
# Hills and Mountains
# 18 = Hills
# 19 = High hills
# 20 = Low mountains
# 21 = High mountains
#
# 1993 Rural-urban contiuum code (Also known as the"Beale code")
#
# Metro counties:
#
# 0  Central counties of metro areas of 1 million population or more
# 1  Fringe counties of metro areas of 1 million population or more
# 2  Counties in metro areas of 250,000 to 1 million population
# 3  Counties in metro areas of fewer than 250,000 population
#
# Nonmetro counties:
#
# 4  Urban population of 20,000 or more, adjacent to a metro area
# 5  Urban population of 20,000 or more, not adjacent to a metro area
# 6  Urban population of 2,500 to 19,999, adjacent to a metro area
# 7  Urban population of 2,500 to 19,999, not adjecent to a metro area
# 8  Completely rural or fewer than 2,500 urban population, adjacent to a
# metro area
# 9  Completely rural or fewer than 2,500 urban population, not adjacent
# to a metro area
#
# Source:  http://www.ers.usda.gov/briefing/rurality/ruralurbcon/
#
#   1993 Urban infuence code
#
# Metro counties:
#
# 1   Large - Central and fringe counties of metro areas of 1 million
# population or more
# 2   Small - Counties in metro areas of fewer than 1 million population
#
# Nonmetro counties:
#
# 3   Adjacent to a large metro area with a city of 10,000 or more
# 4   Adjacent to a large metro area without a city of at least 10,000
# 5   Adjacent to a small metro area with a city of 10,000 or more
# 6   Adjacent to a small metro area without a city of at least 10,000
# 7   Not adjacent to a metro area and with a city of 10,000 or more
# 8   Not adjacent to a metro area and with a city of 2,500 to 9,999 population
# 9   Not adjacent to a metro area and with no city or a city with a population
#     less than 2,500
#
# Source:  http://www.ers.usda.gov/briefing/rurality/urbaninf/
#
# Census Divisions
#
# 1 = New England
# 2 = Middle Atlantic
# 3 = East  North Central
# 4 = West North Central
# 5 = South Atlantic
# 6 = East South Central
# 7 = West South Central
# 8 = Mountain
# 9 = Pacific
#
# Amenity Rank (See map in publication)
#
# Deviations from the mean
# 1 = Over -2 (Low)
# 2 = -1 to -2
# 3 = 0 to -1
# 4 = 0 to 1
# 5 = 1 to 2
# 6 = 2 to 3
# 7 = Over 3 (High)
#
# Notes:  The file consists of an amenity code for all of the counties in the lower 48 states.
# In some cases where the data was not available, estimates were used from a
# combined adjacent county.  There are 41 combined counties in this file.  Most of
# of these combination were the independent cities in Virginia. There  were also county
# combinations in Arizona, Montana, and New Mexico.
#
# For more information on the natural amenity index, contact David McGranahan, DMcG@ers.usda.gov, (202) 694-5356.
library(ggplot2)
# Set the working directory
setwd("~/Documents/__INFO-201/12code/nas")
# Source these R files (note directory location)
source("./source/data_wrangling.R")
source("./source/viz.R")
# Create two data frame, to be used below in the report
na_df          <- create_natural_amenity_scale_df()
wa_map_info_df <- get_map_data_for_county("WA")
head(na_df)
wa_map_info_df <- get_map_data_for_county("WA")
head(wa_map_info_df,22)
na_df <- create_df_for_NAS_map(c("WA"))       # These two functions will be examined later
p <- draw_county_map("WA","adams",na_df)
print(p)
p <- draw_county_map("WA","King",na_df,show_nums=TRUE)
print(p)
df <- create_state_name_code_df()
head(df,5)
head(na_df,5)
na_df <- create_df_for_NAS_map(c("WA"))
p <- create_viz_with_continuous_scale(na_df)
print(p)
na_df <- create_df_for_NAS_map(c("Washington", "Oregon", "California"))
color_list <- get_7green_colors();
p <- create_viz_with_discrete_scale(na_df,color_list)
print(p)
na_df <- create_df_for_NAS_map(c("."))
p <- create_viz_with_continuous_scale(na_df)
print(p)
# NOTES ON Natural Amenities Scale and Data Set
#
# Natural Amenities Scale
#
# The Climatic data is from the Area Resource File (ARF). The ARF file is maintained by
# Quality Resource Systems (QRS) under contract to the Office of Research and Planning, Bureau of
# Health Professions, within the Health Resources and Services Administration.  For more information
# see http://www.arfsys.com .
#
# The topography scale is from The National Atlas of the United States of America
# U.S. Department of Interior, U.S. Geological Survey, Washington, DC., 1970.
#
# Land Surface Form Topography codes:
#
# Plains
# 1 = Flat plains
# 2 = Smooth plains
# 3 = Irregular plains, slight relief
# 4 = Irregular plains
#
# Tablelands
# 5 = Tablelands, moderate relief
# 6 = Tablelands, considerable relief
# 7 = Tablelands, high relief
# 8 = Tablelands, very high relief
#
# Plains with Hills or Mountains
# 9 = Plains with hills
# 10 = Plains with high hills
# 11 = Plains with low mountains
# 12 = Plains with high mountains
#
# Open Hills and Mountains
# 13 = Open low hills
# 14 = Open hills
# 15 = Open high hills
# 16 = Open low mountains
# 17 = Open high mountains
#
# Hills and Mountains
# 18 = Hills
# 19 = High hills
# 20 = Low mountains
# 21 = High mountains
#
# 1993 Rural-urban contiuum code (Also known as the"Beale code")
#
# Metro counties:
#
# 0  Central counties of metro areas of 1 million population or more
# 1  Fringe counties of metro areas of 1 million population or more
# 2  Counties in metro areas of 250,000 to 1 million population
# 3  Counties in metro areas of fewer than 250,000 population
#
# Nonmetro counties:
#
# 4  Urban population of 20,000 or more, adjacent to a metro area
# 5  Urban population of 20,000 or more, not adjacent to a metro area
# 6  Urban population of 2,500 to 19,999, adjacent to a metro area
# 7  Urban population of 2,500 to 19,999, not adjecent to a metro area
# 8  Completely rural or fewer than 2,500 urban population, adjacent to a
# metro area
# 9  Completely rural or fewer than 2,500 urban population, not adjacent
# to a metro area
#
# Source:  http://www.ers.usda.gov/briefing/rurality/ruralurbcon/
#
#   1993 Urban infuence code
#
# Metro counties:
#
# 1   Large - Central and fringe counties of metro areas of 1 million
# population or more
# 2   Small - Counties in metro areas of fewer than 1 million population
#
# Nonmetro counties:
#
# 3   Adjacent to a large metro area with a city of 10,000 or more
# 4   Adjacent to a large metro area without a city of at least 10,000
# 5   Adjacent to a small metro area with a city of 10,000 or more
# 6   Adjacent to a small metro area without a city of at least 10,000
# 7   Not adjacent to a metro area and with a city of 10,000 or more
# 8   Not adjacent to a metro area and with a city of 2,500 to 9,999 population
# 9   Not adjacent to a metro area and with no city or a city with a population
#     less than 2,500
#
# Source:  http://www.ers.usda.gov/briefing/rurality/urbaninf/
#
# Census Divisions
#
# 1 = New England
# 2 = Middle Atlantic
# 3 = East  North Central
# 4 = West North Central
# 5 = South Atlantic
# 6 = East South Central
# 7 = West South Central
# 8 = Mountain
# 9 = Pacific
#
# Amenity Rank (See map in publication)
#
# Deviations from the mean
# 1 = Over -2 (Low)
# 2 = -1 to -2
# 3 = 0 to -1
# 4 = 0 to 1
# 5 = 1 to 2
# 6 = 2 to 3
# 7 = Over 3 (High)
#
# Notes:  The file consists of an amenity code for all of the counties in the lower 48 states.
# In some cases where the data was not available, estimates were used from a
# combined adjacent county.  There are 41 combined counties in this file.  Most of
# of these combination were the independent cities in Virginia. There  were also county
# combinations in Arizona, Montana, and New Mexico.
#
# For more information on the natural amenity index, contact David McGranahan, DMcG@ers.usda.gov, (202) 694-5356.
big_data_frame <- data.frame {
years = c(1999,1998,1997),
stringsAsFactors = FALSE
}
big_data_frame <- data.frame()
years = c(1999,1998,1997),
stringsAsFactors = FALSE
)
big_data_frame <- data.frame(
years = c(1999,1998,1997),
stringsAsFactors = FALSE
)
big_data_frame <- data.frame(
years1 = c(1999,1998,1997),
stringsAsFactors = FALSE
)
get_summary_info <- function(data_set){
for (c in colnames(data_set)) {
output_list <- c(get_col_info(c, data_set))
}
}
get_summary_info(big_data_frame)
get_col_info <- function(year, df){
return (paste0("fun:call ",year))
}
get_col_info <- function(year, df){
return (paste0("fun:call ",year))
}
# Set up a data frame
big_data_frame <- data.frame(
years1 = c(1999,1998,1997),
stringsAsFactors = FALSE
)
get_summary_info <- function(data_set){
for (c in colnames(data_set)) {
output_list <- c(get_col_info(c, data_set))
}
}
print(output_list)
get_col_info <- function(year, df){
return (paste0("fun:call ",year))
}
# Set up a data frame
big_data_frame <- data.frame(
years1 = c(1999,1998,1997),
stringsAsFactors = FALSE
)
get_summary_info <- function(data_set){
for (c in colnames(data_set)) {
output_list <- c(get_col_info(c, data_set))
}
return(output_list)
}
get_summary_info(big_data_frame)
get_col_info <- function(year, df){
return (paste0("fun:call ",year))
}
# Set up a data frame
big_data_frame <- data.frame(
years1 = c(1999,1998,1997),
years2 = c(1901,1902,1903),
stringsAsFactors = FALSE
)
get_summary_info <- function(data_set){
for (c in colnames(data_set)) {
output_list <- c(get_col_info(c, data_set))
}
return(output_list)
}
get_summary_info(big_data_frame)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Consider the description of lapply()
#    lapply(X, FUN, …)
#    lapply returns a list of the same length as X, each
#    element of which is the result of applying FUN to the
#    corresponding element of X.
#    "..." is very important.  This is where you add extra
#    arguments to the the function, FUN
# A function
get_col_info <- function(year, df){
return (paste0("fun:call ",year))
}
# Set up a data frame
big_data_frame <- data.frame(
years1 = c(1999,1998,1997),
years2 = c(1901,1902,1903),
stringsAsFactors = FALSE
)
get_summary_info <- function(data_set){
for (c in colnames(data_set)) {
output_list <- append(output_list, get_col_info(c, data_set))
}
return(output_list)
}
get_summary_info(big_data_frame)
get_col_info <- function(year, df){
return (paste0("fun:call ",year))
}
# Set up a data frame
big_data_frame <- data.frame(
years1 = c(1999,1998,1997),
years2 = c(1901,1902,1903),
stringsAsFactors = FALSE
)
get_summary_info <- function(data_set){
output_list <- c()
for (c in colnames(data_set)) {
output_list <- append(output_list, get_col_info(c, data_set))
}
return(output_list)
}
get_summary_info(big_data_frame)
t <- get_summary_info(big_data_frame)
class(t)
lenght(t)
length(t)
print(t[1])
print(t[2])
